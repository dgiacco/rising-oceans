/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Crowdfunding {
  export type CampaignStruct = {
    owner: AddressLike;
    title: string;
    description: string;
    target: BigNumberish;
    deadline: BigNumberish;
    amountCollected: BigNumberish;
    image: string;
    donators: AddressLike[];
    donations: BigNumberish[];
  };

  export type CampaignStructOutput = [
    owner: string,
    title: string,
    description: string,
    target: bigint,
    deadline: bigint,
    amountCollected: bigint,
    image: string,
    donators: string[],
    donations: bigint[]
  ] & {
    owner: string;
    title: string;
    description: string;
    target: bigint;
    deadline: bigint;
    amountCollected: bigint;
    image: string;
    donators: string[];
    donations: bigint[];
  };
}

export interface CrowdfundingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "campaigns"
      | "createCampaign"
      | "donateToCampaign"
      | "getCampaigns"
      | "getDonators"
      | "numberOfCampaigns"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "campaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [AddressLike, string, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "donateToCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDonators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfCampaigns",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donateToCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDonators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfCampaigns",
    data: BytesLike
  ): Result;
}

export interface Crowdfunding extends BaseContract {
  connect(runner?: ContractRunner | null): Crowdfunding;
  waitForDeployment(): Promise<this>;

  interface: CrowdfundingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  campaigns: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, string] & {
        owner: string;
        title: string;
        description: string;
        target: bigint;
        deadline: bigint;
        amountCollected: bigint;
        image: string;
      }
    ],
    "view"
  >;

  createCampaign: TypedContractMethod<
    [
      _owner: AddressLike,
      _title: string,
      _description: string,
      _target: BigNumberish,
      _deadline: BigNumberish,
      _image: string
    ],
    [bigint],
    "nonpayable"
  >;

  donateToCampaign: TypedContractMethod<[_id: BigNumberish], [void], "payable">;

  getCampaigns: TypedContractMethod<
    [],
    [Crowdfunding.CampaignStructOutput[]],
    "view"
  >;

  getDonators: TypedContractMethod<
    [_id: BigNumberish],
    [[string[], bigint[]]],
    "view"
  >;

  numberOfCampaigns: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "campaigns"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, string] & {
        owner: string;
        title: string;
        description: string;
        target: bigint;
        deadline: bigint;
        amountCollected: bigint;
        image: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createCampaign"
  ): TypedContractMethod<
    [
      _owner: AddressLike,
      _title: string,
      _description: string,
      _target: BigNumberish,
      _deadline: BigNumberish,
      _image: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "donateToCampaign"
  ): TypedContractMethod<[_id: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "getCampaigns"
  ): TypedContractMethod<[], [Crowdfunding.CampaignStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getDonators"
  ): TypedContractMethod<[_id: BigNumberish], [[string[], bigint[]]], "view">;
  getFunction(
    nameOrSignature: "numberOfCampaigns"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
